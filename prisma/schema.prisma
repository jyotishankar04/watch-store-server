generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(uuid())
  name           String
  email          String   @unique
  password       String?
  image          String?
  authProvider   String?
  authProviderId String?
  isAdmin        Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  Cart      Cart?
  Reviews   Reviews[]
  Addresses Addresses[]
}

model Collections {
  id          String   @id @default(uuid())
  name        String
  description String?
  image       String?  @default("https://res.cloudinary.com/djby1yfko/image/upload/v1725814229/1724436300_epoa7k.jpg")
  publicId    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  products Products[]
}

model Products {
  id          String  @id @default(uuid())
  name        String
  description String?
  price       Float

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  isNew     Boolean    @default(false)
  images    Images[]
  features  Features[]

  Collection      Collections?  @relation(fields: [collectionId], references: [id])
  collectionId    String?
  TechnicalData   TechnicalData @relation(fields: [technicalDataId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  technicalDataId String        @unique
  Stocks          Stocks        @relation(fields: [stocksId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  stocksId        String        @unique
  CartItem        CartItem[]
  Reviews         Reviews[]
}

model Images {
  id         String    @id @default(uuid())
  url        String
  Products   Products? @relation(fields: [productsId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productsId String?
  publicId   String
}

model Features {
  id         String    @id @default(uuid())
  featName   String
  Products   Products? @relation(fields: [productsId], references: [id])
  productsId String?
}

model TechnicalData {
  id              String  @id @default(uuid())
  case            String?
  strap           String?
  warranty        String?
  dialColor       String?
  waterResistance String?
  logWidth        String?
  creystal        String?
  movement        String?

  dimensions   Dimensions? @relation(fields: [dimensionsId], references: [id], onDelete: Cascade)
  dimensionsId String?     @unique
  Products     Products?
}

model Dimensions {
  id            String         @id @default(uuid())
  diameter      String
  length        String
  thickness     String
  TechnicalData TechnicalData?
}

model Stocks {
  id        String   @id @default(uuid())
  quantity  Int      @default(5)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Products Products?
}

model Cart {
  id        String   @id @default(uuid())
  userId    String   @unique // Ensures each user has only one cart
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user  User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items CartItem[]
}

model CartItem {
  id        String   @id @default(uuid())
  cartId    String
  productId String
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cart    Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product Products @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([cartId, productId]) // [cartId, productId] is unique for all products in the cart list
}

model Reviews {
  id        String   @id @default(uuid())
  content   String
  rating    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  product   Products @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String

  @@unique([userId, productId])
}

model Addresses {
  id            String  @id @default(uuid())
  name          String
  address       String
  landmark      String?
  city          String
  state         String
  zip           String
  country       String
  contactNumber String

  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}
